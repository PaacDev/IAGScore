name: Django CI

on:
  push:
    branches: ["main", "feature/**"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 2
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    # Clonamos repositoio
    - name: Checkout repo
      uses: actions/checkout@v4

    # Creamos un .env dinámico
    - name: Dinamic .env
      run: |
        echo "DB_USER=test_user" >> .env
        echo "DB_PASSWORD=test_password" >> .env
        echo "DB_NAME=test_db" >> .env
        echo "DB_HOST=postgres_db" >> .env
        echo "DB_PORT=5432" >> .env
        echo "SECRET_KEY=${{ secrets.TEST_SECRET_KEY }}" >> .env

    # Construimos y levantamos los contenedores
    - name: Build and start containers
      run: docker compose up -d --build

    # Ejecutamos los test en el contenedor Django
    - name: Run Django tests
      run: docker compose exec web coverage run --rcfile=.github/workflows/.coveragerc manage.py test

    - name: Generamos los reportes de coverage
      run: |
        docker compose exec web coverage html -d coveragereport/html # Generamos reporte HTML
        docker compose exec web coverage xml -o coveragereport/coverage.xml  # Generamos un reporte XML para Sonarcloud

    # Copiamos los reportes fuera del contenedor
    - name: Copy coverage reports to host
      run: docker cp web:/app/coveragereport ./coveragereport
  
    # Subimos los reportes como artefactos
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-py${{ matrix.python-version }}
        path: coveragereport/

    # Analizamos con SonarCloud para enviar reporte xml de coverage
    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=pac1006_IAGScore
          -Dsonar.organization=pac1006
          -Dsonar.sources=.
          -Dsonar.exclusions=**/*test*.py
          -Dsonar.coverage.exclusions=**/tailwind/**,**/node_modules/**,**/migrations/**
          -Dsonar.python.coverage.reportPaths=coveragereport/coverage.xml

    # Detenemos y limpiamos los contenedores
    - name: Limpiamos contenedores y volúmenes
      if: always()
      run: docker compose down -v

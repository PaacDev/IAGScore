name: Django CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    # Configura el servicio PostgreSQL
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        # Aseguramos que el servicio estÃ© listo antes de continuar
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      max-parallel: 2
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    # Clonamos repositoio
    - uses: actions/checkout@v4

    # Configuramos python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # Instalamos dependencias
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Ejecutamnos los test con coverage
    - name: Run Tests
      env:
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_HOST: localhost
        DB_PORT: 5432
      run: |
        mkdir -p coveragereport  # Creamos el directorio para el reporte XML
        mkdir -p coveragereport/html  # Creamos el directorio para el reporte HTML
        coverage run --rcfile=.github/workflows/.coveragerc manage.py test
        coverage html -d coveragereport/html/  # Generamos reporte HTML
        coverage xml -o coveragereport/coverage.xml # Generamos un reporte XML para Sonarcloud
        
    # Subimos los reportes como artefactos
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-py${{ matrix.python-version }}
        path: coveragereport/

    # Analizamos con SonarCloud para enviar reporte xml de coverage
    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=pac1006_IAGScore
          -Dsonar.organization=pac1006
          -Dsonar.sources=.
          -Dsonar.exclusions=**/*test*.py
          -Dsonar.coverage.exclusions=**/tailwind/**,**/node_modules/**,**/migrations/**
          -Dsonar.python.coverage.reportPaths=coveragereport/coverage.xml
